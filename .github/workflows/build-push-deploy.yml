name: Build Push Deploy Docker Image

on:
  release:
    types:
      - created

env:
  IMAGE_NAME: k8s/azure-vote-demo
  RG_NAME: k8s-demo-rg
  AKSCLUSTER_NAME: k8s-demo-kubernetes

jobs:
  build-and-push:
    name: "Build and Push to ACR"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      #Build the Image
      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      #Login to the Container Registry
      - name: Log in to Azure Container Registry
        run: echo "${{ secrets.ACR_APPPASSWORD }}" | docker login ${{ secrets.ACR_URL }} --username ${{ secrets.ACR_APPID }} --password-stdin

      # Tag and Push the Image to the Registry
      - name: Push image to Azure Container Registry
        run: |
          IMAGE_ID=${{ secrets.ACR_URL }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy-to-k8s:
    needs: build-and-push
    name: "Deploy to Kubernetes"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      #Login to Azure CLI
      - name: Login to Azure CLI
        run: az login --service-principal -u ${{ secrets.ACR_APPID }} -p ${{ secrets.ACR_APPPASSWORD }} --tenant ${{ secrets.APP_TENANTID }}

      #Get and Store the AKS Credentials
      - name: Get AKS Login Credentials
        run: az aks get-credentials --resource-group $RG_NAME --name $AKSCLUSTER_NAME

      - name: Test Kubernetes Access
        run: kubectl get nodes

      - name: Regenerate Image and Version Data
        run: |
          IMAGE_ID=${{ secrets.ACR_URL }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update the Kubernetes Manifest with the correct Image Id
        run: |

          sed -i "s@IMAGE_ID_WITH_VERSION@$IMAGE_ID:$VERSION@gi" azure-vote-manifest.yml
        
      - name: Deploy Demo App to Kubernetes
        run: kubectl apply -f azure-vote-manifest.yml
